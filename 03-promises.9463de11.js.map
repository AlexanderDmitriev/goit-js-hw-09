{"version":3,"sources":["js/03-promises.js"],"names":["refs","delayField","document","querySelector","stepField","children","firstElementChild","amountField","submitButton","createPromise","position","delay","Math","random","submitButtonHandler","event","preventDefault","console","log","value","addEventListener"],"mappings":";AAuDA,MAAMA,EAAO,CACXC,WAAaC,SAASC,cAAc,eACpCC,UAAYF,SAASC,cAAc,SAASE,SAAS,GAAGC,kBACxDC,YAAcL,SAASC,cAAc,SAASE,SAAS,GAAGC,kBAC1DE,aAAeN,SAASC,cAAc,iBAGxC,SAASM,EAAcC,EAAUC,GACTC,KAAKC,SAQ7B,MAAMC,EAAuBC,IAC3BA,EAAMC,iBACNC,QAAQC,IAAIlB,EAAKC,WAAWkB,OAC5BF,QAAQC,IAAIlB,EAAKI,UAAUe,OAC3BF,QAAQC,IAAIlB,EAAKO,YAAYY,QAG/BnB,EAAKQ,aAAaY,iBAAiB,QAAUN","file":"03-promises.9463de11.js","sourceRoot":"../src","sourcesContent":["/* Задание 3 - генератор промисов\n  Выполняй это задание в файлах 03-promises.html и 03-promises.js. \nПосмотри демо видео работы генератора промисов.\n\n  В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах, \n  шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n<form class=\"form\">\n  <label>\n    First delay (ms)\n    <input type=\"number\" name=\"delay\" required />\n  </label>\n  <label>\n    Delay step (ms)\n    <input type=\"number\" name=\"step\" required />\n  </label>\n  <label>\n    Amount\n    <input type=\"number\" name=\"amount\" required />\n  </label>\n  <button type=\"submit\">Create promises</button>\n</form>\n\n  Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, \nсколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и \nзадержку учитывая введенную пользователем первую задержку (delay) и шаг (step).\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\n  Дополни код функции createPromise так, чтобы она возвращала один промис, \nкоторый выполянется или отклоняется через delay времени. Значением промиса должен быть объект, \nв котором будут свойства position и delay со значениями одноименных параметров. \nИспользуй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\nБиблиотека уведомлений\n\nДля отображения уведомлений пользователю вместо console.log() используй библиотеку notiflix.\n\n */\n//================= Инициализация  =====================================//\nconst refs = {\n  delayField : document.querySelector('.form input'),\n  stepField : document.querySelector('.form').children[1].firstElementChild,\n  amountField : document.querySelector('.form').children[2].firstElementChild,\n  submitButton : document.querySelector('.form button')\n}\n//================= Методы  =====================================//\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\nconst submitButtonHandler = (event) => {\n  event.preventDefault();\n  console.log(refs.delayField.value);\n  console.log(refs.stepField.value);\n  console.log(refs.amountField.value);\n}\n//================= Actions  =====================================//\nrefs.submitButton.addEventListener('click' , submitButtonHandler);\n"]}